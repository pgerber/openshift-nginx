#!/usr/bin/python3
import functools
import ipaddress
import jinja2
import os
from pathlib import Path
import subprocess


def write_access_conf(raw, conf_file='/etc/nginx/access.conf'):
    addresses = list(extract_addresses(raw))
    with open(conf_file, 'w') as f:
        write = functools.partial(print, file=f)
        write('# generated by Docker entrypoint script')

        if addresses:
            for addr in addresses:
                write('allow {};'.format(addr.compressed))
            write('deny all;')


def extract_addresses(raw):
    for addr in raw.split():
        if '-' in addr:
            start, end = addr.split('-', 1)
            yield from ipaddress.summarize_address_range(ipaddress.ip_address(start), ipaddress.ip_address(end))
        else:
            yield ipaddress.ip_network(addr)


def create_nginx_conf():
    process_template(Path('/etc/nginx/nginx.conf.template'))

    for template in Path('/etc/nginx/conf.d/').glob('*.conf.template'):
        process_template(template)


def process_template(template_path):
    with template_path.open() as f:
        template = jinja2.Template(f.read())

    # allow use of any env. variable in nginx config files
    config = template.render(os.environ)

    config_path = template_path.with_suffix('')
    with config_path.open('w') as f:
        f.write(config)


def main():
    write_access_conf(os.environ.get('IP_WHITELIST', ''))

    GLOBAL_DIRECTIVES='daemon off;'
    subprocess.check_call(['/usr/local/bin/header_config.py'])
    create_nginx_conf()
    subprocess.check_call(['nginx', '-t', '-g', GLOBAL_DIRECTIVES])
    os.execvp('nginx', ['nginx', '-g', GLOBAL_DIRECTIVES])


if __name__ == '__main__':
    main()
